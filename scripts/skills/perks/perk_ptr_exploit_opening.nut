this.perk_ptr_exploit_opening <- this.inherit("scripts/skills/skill", {
	m = {
		HitChanceIncrease = 10,
		Opponents = []
	},
	function create()
	{
		this.m.ID = "perk.ptr_exploit_opening";
		this.m.Name = this.Const.Strings.PerkName.PTRExploitOpening;
		this.m.Description = this.Const.Strings.PerkDescription.PTRExploitOpening;
		this.m.Icon = "ui/perks/ptr_exploit_opening.png";
		this.m.Type = this.Const.SkillType.Perk | this.Const.SkillType.StatusEffect;
		this.m.Order = this.Const.SkillOrder.Perk | this.Const.SkillType.StatusEffect;
		this.m.IsActive = false;
		this.m.IsStacking = false;
		this.m.IsHidden = false;
	}

	function getDescription()
	{
		return "This character is ready to exploit an opening in an attacker\'s stance who has missed an attack against them.";
	}

	function isHidden()
	{
		return this.m.Opponents.len() == 0;
	}

	function onCombatFinished()
	{
		this.skill.onCombatFinished();
		this.m.Opponents.clear();
	}

	function getOpponent(_entityID)
	{
		return this.Tactical.getEntityByID(_entityID);
	}

	function addOpponent(_entityID)
	{
		if (this.m.Opponents.find(_entityID) == null)
		{
			this.m.Opponents.push(_entityID);
		}
	}

	function removeOpponent(_entityID)
	{
		local idx = this.m.Opponents.find(_entityID);
		if (idx != null)
		{
			this.m.Opponents.remove(idx);
		}
	}

	function getTooltip()
	{
		local tooltip = this.skill.getTooltip();

		tooltip.push(
			{
				id = 10,
				type = "text",
				icon = "ui/icons/melee_defense.png",
				text = "[color=" + this.Const.UI.Color.NegativeValue + "]+" + this.m.HitChanceIncrease + "[/color] Melee Skill when attacking:"
			}
		);

		foreach (opponentID in this.m.Opponents)
		{
			local e = this.getOpponent(opponentID);
			if (e == null) continue;

			tooltip.push(
				{
					id = 10,
					type = "text",
					icon = "ui/icons/special.png",
					text = e.getName()
				}
			);
		}

		return tooltip;
	}

	function onMissed( _attacker, _skill )
	{
		local actor = this.getContainer().getActor();

		if (!actor.isPlacedOnMap() || actor.getMoraleState() == this.Const.MoraleState.Fleeing)
		{
			return;
		}

		if (_skill == null || !_skill.isAttack() || _skill.isRanged() || _attacker == null || _attacker.isAlliedWith(this.getContainer().getActor()))
		{
			return;
		}

		local attackerEffect = _attacker.getSkills().getSkillByID("effects.ptr_exploitable_opening");
		if (attackerEffect == null)
		{
			this.printDebug("Exploiter " + this.getContainer().getActor().getName() + " (ID: " + this.getContainer().getActor().getID() + ") was attacked and is adding the Exploitable Opening effect to: " + _attacker.getName() + "(ID: " + _attacker.getID() + ")", "mod_legends_PTR");
			local effect = this.new("scripts/skills/effects/ptr_exploitable_opening_effect");
			effect.addOpponent(this.getContainer().getActor().getID());
			_attacker.getSkills().add(effect);
		}
		else
		{
			attackerEffect.addOpponent(this.getContainer().getActor().getID());
		}

		this.addOpponent(_attacker.getID());
	}

	function onAnySkillUsed( _skill, _targetEntity, _properties )
	{
		if (_targetEntity != null)
		{
			local effect = _targetEntity.getSkills().getSkillByID("effects.ptr_exploitable_opening");
			if (effect != null && effect.hasOpponent(this.getContainer().getActor().getID()))
			{
				_properties.MeleeSkill += this.m.HitChanceIncrease;
			}
		}
	}

	function onDeath()
	{
		this.printDebug("Exploiter " + this.getContainer().getActor().getName() + " (ID: " + this.getContainer().getActor().getID() + ") is dying and hence will remove itself as opponent from Exploitable Opening effect of others:", "mod_legends_PTR");
		foreach (opponentID in this.m.Opponents)
		{
			this.printDebug("* Checking opponent " + opponentID, "mod_legends_PTR");

			local e = this.getOpponent(opponentID);
			if (e == null) continue;

			this.printDebug("* " + opponentID + " is not null and has type " + (typeof e), "mod_legends_PTR");

			local effect = e.getSkills().getSkillByID("effects.ptr_exploitable_opening");
			if (effect != null)
			{
				this.printDebug("* Removing from " + opponentID, "mod_legends_PTR");
				effect.removeOpponent(this.getContainer().getActor().getID());
			}
		}
	}

	function onTurnEnd()
	{
		this.printDebug("Exploiter " + this.getContainer().getActor().getName() + " (ID: " + this.getContainer().getActor().getID() + ") is ending turn and hence will remove itself as opponent from Exploitable Opening effect of others:", "mod_legends_PTR");
		foreach (opponentID in this.m.Opponents)
		{
			this.printDebug("* Checking opponent " + opponentID, "mod_legends_PTR");

			local e = this.getOpponent(opponentID);
			if (e == null) continue;

			this.printDebug("* " + opponentID + " is not null and has type " + (typeof e), "mod_legends_PTR");

			local effect = e.getSkills().getSkillByID("effects.ptr_exploitable_opening");
			if (effect != null)
			{
				this.printDebug("* Removing from " + opponentID, "mod_legends_PTR");
				effect.removeOpponent(this.getContainer().getActor().getID());
			}
		}

		this.m.Opponents.clear();
	}
});
