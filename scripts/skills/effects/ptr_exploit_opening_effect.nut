this.ptr_exploit_opening_effect <- this.inherit("scripts/skills/skill", {
	m = {
		HitChanceIncrease = 10,
		Opponents = []
	},
	function create()
	{
		this.m.ID = "effects.ptr_exploit_opening";
		this.m.Name = "Exploit Opening";
		this.m.Description = "A character has missed an attack against this target, allowing them to exploit the attacker\'s opening.";
		this.m.Icon = "ui/perks/parried_circle.png";
		this.m.IconMini = "mini_parried_circle";
		this.m.Type = this.Const.SkillType.StatusEffect;
		this.m.IsActive = false;
		this.m.IsStacking = false;
		this.m.IsRemovedAfterBattle = true;
	}

	function addOpponent(_entity)
	{
		if (this.m.Opponents.find(_entity) == null)
		{
			this.m.Opponents.push(_entity);
		}
	}

	function removeOpponent(_entity)
	{
		local idx = this.m.Opponents.find(_entity);
		if (idx != null)
		{
			this.m.Opponents.remove(idx);
		}

		if (this.m.Opponents.len() == 0)
		{
			this.removeSelf();
		}
	}

	function getTooltip()
	{
		local tooltip = this.skill.getTooltip();

		if (this.m.Opponents.len() != 0)
		{
			tooltip.push(
				{
					id = 10,
					type = "text",
					icon = "ui/icons/melee_defense.png",
					text = "[color=" + this.Const.UI.Color.NegativeValue + "]+" + this.m.HitChanceIncrease + "[/color] Melee Skill when attacking:"
				}
			);
			foreach (opponent in this.m.Opponents)
			{
				if (opponent == null || !opponent.isPlacedOnMap() || !opponent.isAlive() || opponent.isDying())
				{
					continue;
				}

				tooltip.push(
					{
						id = 10,
						type = "text",
						icon = "ui/icons/special.png",
						text = opponent.getName()
					}
				);
			}
		}

		return tooltip;
	}

	function onAnySkillUsed( _skill, _targetEntity, _properties )
	{
		if (_targetEntity != null)
		{
			local effect = opponent.getSkills().getSkillByID("effects.exploitable_opening");
			if (effect != null && effect.hasOpponent(this.getContainer().getActor()))
			{
				_properties.MeleeSkill += this.m.HitChanceIncrease;
			}
		}
	}

	function onDeath()
	{
		foreach (opponent in this.m.Opponents)
		{
			local effect = opponent.getSkills().getSkillByID("effects.exploitable_opening");
			effect.removeOpponent(this.getContainer().getActor());
		}
	}

	function onTurnEnd()
	{
		foreach (opponent in this.m.Opponents)
		{
			local effect = opponent.getSkills().getSkillByID("effects.exploitable_opening");
			effect.removeOpponent(this.getContainer().getActor());
		}

		this.removeSelf();
	}
});
